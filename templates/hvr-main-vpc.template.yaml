---
AWSTemplateFormatVersion: 2010-09-09

######################################
## Stack Description  
######################################
Description: >-
  This main template creates a VPC for deployment of HVR on AWS. 
  **WARNING**
  This template creates EC2 instances and related resources. You will be billed
  for the AWS resources used if you create a stack from this template.(qs-1roo3sq66)

######################################
## Stack Metadata
######################################
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Launch into a new VPC"
    Order: 1
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: End User License Agreement (EULA) - HVR CDC
        Parameters:
          - AcceptedEULA
      - Label:
          default: "VPC network configuration"
        Parameters:
          - AvailabilityZones
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - RemoteAccessCIDR
      - Label:
          default: "HVR EC2 Configuration"
        Parameters:
          - HVRInstanceTypeHUB
          - HVRInstanceTypeAgent
          - KeyName
      - Label:
          default: Tag identifiers
        Parameters:
          - TagEnvironment
      - Label:
          default: HVR Aurora/PostgreSQL configuration
        Parameters:
          - EnablePGStack
          - DBAccessCIDR
          - PGInstanceClass
          - NotificationList
      - Label:
          default: AWS Quick Start configuration S3 Bucket/Prefix
        Parameters:
          - QSS3BucketRegion
          - QSS3BucketName
          - QSS3KeyPrefix

    ParameterLabels:
      AcceptedEULA:
        default: Accepted EULA from AWS Marketplace
      AvailabilityZones:
        default: Availability Zones
      VPCCIDR:
        default: CIDR Block for the VPC
      PublicSubnet1CIDR:
        default: Public CIDR Block AZ 1
      PublicSubnet2CIDR:
        default: Public CIDR Block AZ 2
      PrivateSubnet1CIDR:
        default: Private CIDR Block AZ 1
      PrivateSubnet2CIDR:
        default: Private CIDR Block AZ 2
      RemoteAccessCIDR:
        default: Allowed CIDR to Bastion Host
      DBAccessCIDR:
        default: Allowed CIDR that will have DB access
      HVRInstanceTypeHUB:
        default: HVR EC2 instance type for HVR HUB
      HVRInstanceTypeAgent:
        default: HVR EC2 instance type for HVR Agent
      KeyName:
        default: Key pair name
      EnablePGStack:
        default: Do you want to create Aurora Postgres stack?
      NotificationList:
        default: SNS notification email for Aurora/PostgreSQL notifications
      PGInstanceClass:
        default: Aurora/PostgreSQL instance class
      TagEnvironment:
        default: Environment Tag 
      QSS3BucketRegion:
        default: S3 Region for S3 Bucket
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 Key prefix

  License: Apache-2.0


######################################
## Parameters
######################################
Parameters:
  AcceptedEULA:
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"
    Description: >-
      PLEASE READ THE HVR SOFTWARE LICENSE AGREEMENT (https://www.hvr-software.com/license-agreement/) CAREFULLY BEFORE USING THE SOFTWARE.
      The HVR stack can be created only if you have already accepted the EULA. To accept the EULA, see https://aws.amazon.com/marketplace/pp/B077YM8HPW.
    Type: String

  AvailabilityZones:
    Description: >-
      List of Availability Zones to use for the subnets in the VPC. Only two
      Availability Zones are used for this deployment, and the logical order of
      your selections is preserved.
    Type: "List<AWS::EC2::AvailabilityZone::Name>"

  RemoteAccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR address from which you will connect to the Bastion Host.
    Type: String

  DBAccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Default: 10.0.0.0/18
    Description: The Private CIDR address from which you will connect to the DB Instance.
    Type: String

  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String

  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public subnet 1 located in Availability Zone 1 - The Bastion host will be deployed here.
    Type: String

  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public subnet 1 located in Availability Zone 2 - The Bastion host will be deployed here.
    Type: String

  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1 - HVR Hub, Agent and Aurora/Postgress DB will be deployed here.
    Type: String

  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2 - HVR Hub, Agent and Aurora/Postgress DB will be deployed here.
    Type: String

  HVRInstanceTypeHUB:
    Description: EC2 instance type - for HVR HUB
    Type: String
    Default: c4.large
    AllowedValues:
      [
        c4.large,
        c4.xlarge,
        c4.2xlarge,
        c4.4xlarge,
      ]
    ConstraintDescription: Must be a valid EC2 instance type.

  HVRInstanceTypeAgent:
    Description: EC2 instance type - for HVR Agent running Capture/Integrate
    Type: String
    Default: c4.large
    AllowedValues: 
      [
        c4.large,
        c4.xlarge,
        c4.2xlarge,
        c4.4xlarge,
      ]
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  NotificationList:
    Type: String
    Default: "ops@company.com"
    Description: The email notification that is used to configure an SNS topic for sending an Amazon CloudWatch alarm and Amazon RDS event notifications.
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: provide a valid email address.

  EnablePGStack:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: Enables or disables creation of an Amazon Aurora Postgresql RDS stack. If true, an Amazon Aurora Postgresql RDS stack will be created.
    Type: String

  PGInstanceClass:
    AllowedValues:
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
    Default: db.r5.large
    Description: The Aurora/PostgreSQL database instance class.
    Type: String

  TagEnvironment:
    Type: String
    AllowedValues:
      - dev
      - test
      - qa
      - prod
    Description: Designates the environment stage of the associated AWS resource.
    Default: "dev"

  QSS3BucketRegion:
    Default: "us-east-1"
    Description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
    Type: String

  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: "quickstart-hvr"
    Description: "The S3 bucket name for the Quick Start assets. The Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String

  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: quickstart-hvr/
    Description: "The S3 key prefix for the Quick Start assets. The Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String


######################################
## Condition definitions 
######################################
Conditions:
  UsingDefaultBucket: !Equals 
    - !Ref QSS3BucketName
    -  "aws-quickstart"

  CreatePGStack: !Equals
    - !Ref EnablePGStack
    - "true"

  IsAcceptedEULA: !Equals
    - !Ref AcceptedEULA
    - "yes"


######################################
## Declaration of stack resources
######################################
Resources:

  ## ------------------------------------------------------------ #
  ## Create nested stack for VPC creation
  ## ------------------------------------------------------------ #
  VPCStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
          - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-aws-vpc/templates/aws-vpc.template.yaml
          - S3Bucket: !If
              - UsingDefaultBucket
              - !Sub "aws-quickstart-${AWS::Region}"
              - !Ref "QSS3BucketName"
            S3Region: !If
              - UsingDefaultBucket
              - !Ref "AWS::Region"
              - !Ref "QSS3BucketRegion"
      Parameters:
        AvailabilityZones: !Join
          - ","
          - !Ref AvailabilityZones
        NumberOfAZs: "2"
        PrivateSubnet1ACIDR: !Ref PrivateSubnet1CIDR
        PrivateSubnet2ACIDR: !Ref PrivateSubnet2CIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        VPCCIDR: !Ref VPCCIDR

  ## ------------------------------------------------------------ #
  ## Create nested stack for Bastion host (based on HVR BYOL system)
  ## - this allows SSH and HVR GUI access
  ## ------------------------------------------------------------ #
  
  BastionStack:
    Condition: IsAcceptedEULA
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/hvr.bastion.template.yaml'
          - S3Bucket: !If
              - UsingDefaultBucket
              - !Sub "aws-quickstart-${AWS::Region}"
              - !Ref "QSS3BucketName"
            S3Region: !If
              - UsingDefaultBucket
              - !Ref "AWS::Region"
              - !Ref "QSS3BucketRegion"
      Parameters:
        VPCID: !GetAtt VPCStack.Outputs.VPCID
        PublicSubnet1: !GetAtt VPCStack.Outputs.PublicSubnet1ID
        PublicSubnet2: !GetAtt VPCStack.Outputs.PublicSubnet2ID
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        KeyName: !Ref KeyName
        TagEnvironment: !Ref TagEnvironment
  

  ## ------------------------------------------------------------ #
  ## Create nested stack for HVR Hub and Agents
  ## ------------------------------------------------------------ #
  HVRStack:
    Condition: IsAcceptedEULA
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
          - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/hvr.workload.vpc.template.yaml
          - S3Bucket: !If
              - UsingDefaultBucket
              - !Sub "aws-quickstart-${AWS::Region}"
              - !Ref "QSS3BucketName"
            S3Region: !If
              - UsingDefaultBucket
              - !Ref "AWS::Region"
              - !Ref "QSS3BucketRegion"
      Parameters:
        AcceptedEULA: !Ref AcceptedEULA
        VPCID: !GetAtt
          - VPCStack
          - Outputs.VPCID
        PrivateSubnet1CIDR: !GetAtt
          - VPCStack
          - Outputs.PrivateSubnet1ACIDR
        PrivateSubnet2CIDR: !GetAtt
          - VPCStack
          - Outputs.PrivateSubnet2ACIDR
        PublicSubnet1CIDR: !GetAtt
          - VPCStack
          - Outputs.PublicSubnet1CIDR
        PublicSubnet2CIDR: !GetAtt
          - VPCStack
          - Outputs.PublicSubnet2CIDR
        PrivateSubnet1: !GetAtt
          - VPCStack
          - Outputs.PrivateSubnet1AID
        PrivateSubnet2: !GetAtt
          - VPCStack
          - Outputs.PrivateSubnet2AID
        HVRInstanceTypeHUB: !Ref HVRInstanceTypeHUB
        HVRInstanceTypeAgent: !Ref HVRInstanceTypeAgent
        KeyName: !Ref KeyName
        TagEnvironment: !Ref TagEnvironment
  

  ## ------------------------------------------------------------ #
  ## Creat nexted stack for Aurora/Postgresql if required
  ## ------------------------------------------------------------ #

  ## --------------------------------------------- #
  ## Create Aurora/Postgresql user password in SSM
  ## --------------------------------------------- #
  PGUserSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub hvr/quickstart/${TagEnvironment}/pgUserSecret
      Description: Autogenerated Aurora/Postgresql hvrhub user password
      GenerateSecretString:
        SecretStringTemplate: '{"username": "hvrhub"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: \'"@/
      Tags:
        - Key: Name
          Value: !Sub pg-user-secret-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  AuroraStack:
    Condition: CreatePGStack
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-amazon-aurora-postgresql/templates/aurora_postgres.template.yaml
        - S3Bucket: !If
            - UsingDefaultBucket
            - !Sub "aws-quickstart-${AWS::Region}"
            - !Ref "QSS3BucketName"
          S3Region: !If
            - UsingDefaultBucket
            - !Ref "AWS::Region"
            - !Ref "QSS3BucketRegion"
      Parameters:
        Subnet1ID: !GetAtt
          - VPCStack
          - Outputs.PrivateSubnet1AID
        Subnet2ID: !GetAtt
          - VPCStack
          - Outputs.PrivateSubnet2AID
        VPCID: !GetAtt
          - VPCStack
          - Outputs.VPCID
        DBName: hvrhub
        DBAutoMinorVersionUpgrade: "true"
        DBAllocatedStorageEncrypted: "true"
        DBBackupRetentionPeriod: "35"
        DBEngineVersion: "11.7"
        DBInstanceClass: !Ref PGInstanceClass
        DBMasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref PGUserSecret, ':SecretString:username}}' ]]
        DBMasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref PGUserSecret, ':SecretString:password}}' ]]
        DBPort: 5432
        DBMultiAZ: "true"
        CustomDBSecurityGroup: ""
        EnableEventSubscription: "true"
        DBAccessCIDR: !Ref DBAccessCIDR
        NotificationList: !Ref NotificationList
        EnvironmentStage: !Ref TagEnvironment


######################################
## Define stack output values
######################################
Outputs:

  HVRBastionNLBDns:
    Condition: IsAcceptedEULA
    Description: HVR Bastion Host Access Point (Load Balancer DNS)
    Value:  
      Fn::GetAtt:
        - BastionStack       
        - Outputs.HVRBastionNLBDns

  HVRPort:
    Condition: IsAcceptedEULA
    Description: Port of the HVR Hub and Agents (via Load Balancers)
    Value:
      Fn::GetAtt:
        - HVRStack 
        - Outputs.HVRPort

  HVRHubNLBDns:
    Condition: IsAcceptedEULA
    Description: HVR Hub Access Point (Load Balancer DNS)
    Value:  
      Fn::GetAtt:
        - HVRStack       
        - Outputs.HVRHubNLBDns

  HVRAgentNLBDns:
    Condition: IsAcceptedEULA
    Description: HVR Agent Access Point (Load Balancer DNS)
    Value: 
      Fn::GetAtt:
        - HVRStack
        - Outputs.HVRAgentNLBDns

  RDSEndpoint:
    Description: Aurora Postgres Endpoint
    Condition: CreatePGStack
    Value:
      Fn::GetAtt:
        - AuroraStack
        - Outputs.RDSEndPointAddress

  RDSPort:
    Description: Aurora/Postgres default port
    Condition: CreatePGStack
    Value: 5432

  RDSUser:
    Description: Aurora/Postgres default HVR User
    Condition: CreatePGStack
    Value: "hvrhub"

  RDSUserSecretARN:
    Description: Aurora/Postgres hvrhub user password can be found in Secrets Manager.
    Condition: CreatePGStack
    Value: !Ref PGUserSecret

  RDSDBName:
    Description: Aurora/Postgresql Database Name
    Condition: CreatePGStack
    Value: hvrhub
