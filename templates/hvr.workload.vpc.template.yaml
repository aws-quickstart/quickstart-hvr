---
AWSTemplateFormatVersion: 2010-09-09

######################################
## Stack Description
######################################
Description: >-
  This template creates an HVR environment in a specified VPC.
  **WARNING**
  This template creates EC2 instances and related resources. You will be billed
  for the AWS resources used if you create a stack from this template.(qs-1roo3sq3n)

######################################
## Stack Metadata
######################################
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: End User License Agreement (EULA) - HVR CDC
        Parameters:
          - AcceptedEULA
      - Label:
          default: "VPC network configuration"
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1
          - PrivateSubnet2
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      - Label:
          default: "HVR EC2 Configuration"
        Parameters:
          - HVRInstanceTypeHUB
          - HVRInstanceTypeAgent
          - KeyName
      - Label:
          default: Tag identifiers
        Parameters:
          - TagEnvironment
      - Label:
          default: Hubserver Public and Private keys for HVR communication
        Parameters:
          - HVRPubKeyBase64
          - HVRPrivKeyBase64
      - Label:
          default: Agent Public and Private keys for HVR communication
        Parameters:
          - HVRAgentPubKeyBase64
          - HVRAgentPrivKeyBase64
          - HVRAgentPrivKeyPasswordBase64
      - Label:
          default: Secrets Manager ARN for HVR License Key secret
        Parameters:
          - HVRLicenseSecret
      - Label:
          default: HVR Hub Repository details
        Parameters:
          - HubDatabaseUsername
          - HubDatabaseUserPassword
          - HubDatabaseName
          - HubDatabaseEndpoint
          - HubDatabasePort
      - Label:
          default: EC2 Instance Cloudwatch Agent - log group name
        Parameters:
          - LogGroupName

    ParameterLabels:
      AcceptedEULA:
        default: Accepted EULA from AWS Marketplace
      VPCID:
        default: VPCID ID
      VPCCIDR:
        default: CIDR Block for the VPC
      PrivateSubnet1:
        default: Private subnet 1 ID
      PrivateSubnet2:
        default: Private subnet 2 ID
      PrivateSubnet1CIDR:
        default: Private Subnet 1 (AZ1) CIDR Range
      PrivateSubnet2CIDR:
        default: Private Subnet 2 (AZ2) CIDR Range
      HVRInstanceTypeHUB:
        default: EC2 instance type for HUB
      HVRInstanceTypeAgent:
        default: EC2 instance type for Agent
      KeyName:
        default: Key pair name
      TagEnvironment:
        default: Environment
      HVRPubKeyBase64:
        default: Hubserver Public Key (base64)
      HVRPrivKeyBase64:
        default: Hubserver Private Key (base64)
      HVRAgentPubKeyBase64:
        default: Agent Private Key (base64) 
      HVRAgentPrivKeyBase64:
        default: Agent Private Key (base64) 
      HVRAgentPrivKeyPasswordBase64:
        default: Agent Private Key Password (base64) 
      HVRLicenseSecret:
        default: License Key (Secret ARN)
      HubDatabaseUsername:
        default: Repository Database User
      HubDatabaseUserPassword:
        default: Repository Database User Password
      HubDatabaseName:
        default: Repository Database Name
      HubDatabaseEndpoint:
        default: Repository Database Endpoint
      HubDatabasePort:
        default: Repository Database PORT
      LogGroupName:
        default: Cloudwatch Log Group Name

  License: Apache-2.0


######################################
## Parameters
######################################
Parameters:
  AcceptedEULA:
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"
    Description: >-
      PLEASE READ THE HVR SOFTWARE LICENSE AGREEMENT (https://www.hvr-software.com/license-agreement/) CAREFULLY BEFORE USING THE SOFTWARE.
      The HVR stack can be created only if you have already accepted the EULA. To accept the EULA, see https://aws.amazon.com/marketplace/pp/B077YM8HPW.
    Type: String

  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the existing VPC that contains the subnets.

  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String

  PrivateSubnet1:
    Description: "An existing private subnet 1 to launch secondary resources (e.g. PostgresSQL database)."
    Type: AWS::EC2::Subnet::Id

  PrivateSubnet2:
    Description: "An existing private subnet 2 to launch secondary resources (e.g. PostgresSQL database)."
    Type: AWS::EC2::Subnet::Id

  PrivateSubnet1CIDR:
    Description: VPC Stack Shared CIDR block for the private subnet 1 located in Availability Zone 1
    Type: String

  PrivateSubnet2CIDR:
    Description: VPC Stack Shared CIDR block for the private subnet 2 located in Availability Zone 2
    Type: String

  HVRInstanceTypeHUB:
    Description: General Purpose EC2 instance - Recommended for HUB only Instances
    Type: String
    Default: c5.large
    AllowedValues:
      [
        c5.large,
        c5.xlarge,
        c5.2xlarge,
        c5.4xlarge
      ]
    ConstraintDescription: Must be a valid EC2 instance type.

  HVRInstanceTypeAgent:
    Description: Compute Based EC2 instance - Recommended for Agent instances running Capture/Integrate
    Type: String
    Default: c5.large
    AllowedValues:
      [
        c5.large,
        c5.xlarge,
        c5.2xlarge,
        c5.4xlarge
      ]
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  TagEnvironment:
    Type: String
    AllowedValues:
      - dev
      - test
    Description: Designates the environment stage of the associated AWS resource.
    Default: "dev"

  ## The default public key below is a sample public key, with corresponding private key being defined below.
  ## These are used internally to allow secure communication with the Hubserver.
  ## Self Signed certificates are used - they can be generated with hvrsslgen utility or using openssl, example
  ## openssl req -x509 -nodes -sha256 -days 365 -newkey rsa:2048 -keyout privkey.pem -out pub_cert.pem -subj "/C=XX/O=Self Signed/CN=Self Signed"
  ## Lambda does not include openssl anymore otherwise using a lambda function would work.
  HVRPubKeyBase64:
    Description: |
      Specify Hubserver public key certificate (to be entered as a base64 string) to be used for secure communication, a default key is provided for testing.
      A method to get this string from your public certificate, is using the base64 utility, example: "cat hvr.pub_cert \| base64"
    Type: String
    NoEcho: true
    Default: |
      LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR5VENDQXJHZ0F3SUJBZ0lKQU1wNDJmNDZa
      T0w0TUEwR0NTcUdTSWIzRFFFQkN3VUFNSHN4Q3pBSkJnTlYKQkFZVEFrNWFNUkV3RHdZRFZRUUlE
      QWhCZFdOcmJHRnVaREVSTUE4R0ExVUVCd3dJUVhWamEyeGhibVF4R0RBVwpCZ05WQkFvTUQwZHNi
      MkpoYkNCVFpXTjFjbWwwZVRFV01CUUdBMVVFQ3d3TlNWUWdSR1Z3WVhKMGJXVnVkREVVCk1CSUdB
      MVVFQXd3TFpYaGhiWEJzWlM1amIyMHdIaGNOTWpJd05USTJNakl5TnpBd1doY05Nak13TlRJMk1q
      SXkKTnpBd1dqQjdNUXN3Q1FZRFZRUUdFd0pPV2pFUk1BOEdBMVVFQ0F3SVFYVmphMnhoYm1ReEVU
      QVBCZ05WQkFjTQpDRUYxWTJ0c1lXNWtNUmd3RmdZRFZRUUtEQTlIYkc5aVlXd2dVMlZqZFhKcGRI
      a3hGakFVQmdOVkJBc01EVWxVCklFUmxjR0Z5ZEcxbGJuUXhGREFTQmdOVkJBTU1DMlY0WVcxd2JH
      VXVZMjl0TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBb1dKZm1j
      ZkM0ZXlVcFBBaTU0elRtYnFMa2lRSjMxK1YzZHVXMGwzWQp5Q1NjUlVoVVRxaldZYVZqb09LZ3dj
      S2JMUnozRGJ0NVdOSmxPcG1QQlRKMkJZdHVDQ1dnN1g1ZVFUc3hkVlBTCkR3NFNDTkFhdEo0MWhD
      Zm85T1N4NlNYaEVEdEZRUnBEZ0pkc1Bad0t5bzRRMEQ5NUJrODRwbGdCQ2VJZ0Y0blcKWGduK25Q
      ajNVamlVNW9yZnFaUUJXUm9OV1h0L0oybTZFdmVvckQ4dWJlR3lDYXBxSEZ0YU5VODlJbmN6TGNI
      QwpZb0RITDBFVlk3YmJNVml4RVJObmNpVE9sV0R1U1pyKzlmU0R3TUxkRWZUbm9Td3p4dmF4ODRB
      Z3dJdmxtYlkzCnAva3FDUGFYRExyQVk4TzJwSlRlVVdOTENRSXFyVDZJQ1ptN01XSlJTUHBmb3dJ
      REFRQUJvMUF3VGpBZEJnTlYKSFE0RUZnUVU4cVptdkg1dWVEL3hPdTNJdVBsOUlGQmNKREV3SHdZ
      RFZSMGpCQmd3Rm9BVThxWm12SDV1ZUQveApPdTNJdVBsOUlGQmNKREV3REFZRFZSMFRCQVV3QXdF
      Qi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFVb2thClBSWmY3K0p5V1U2S1ZCOVU4Z0I0RUhp
      eERoa2VLNlhlRkZWdmhHSmNYbHlTZ216K1RJSDQ1SnVXQkxMclhLSFIKQlpUYzJxSG9ZOFh1eDIw
      QUNoVlRQdTRPSUo0bFBKOFlyY2duZ3ZKVTVBcE5UUUtjd0NDVzdvZ2syK0E1MG5KeQo1UktpYUdl
      Q1hZaGF3ZU5OZEh4QzBwMWFzc3BhSDFLU2JFaGdUSjhBU3YyUnZYZzBlcjRvWHpGdDFGMnB1bHhT
      CjY0RWRMRVJhcmdkdUdXVEtuejQ5ejVVeVRDazA2N0JTYll4dTNaUGpZbkM2U29MSVJXWVFtMXRE
      RUhzMGdxeDEKSGpObXFtMW4rR1RkQi91d1A0UnRER3gvdGdaYXA4dkw3b0lVMHZYZUdwc25WVVh2
      WnhCNVhYRS9UYUpzZmFvUgpVTzhOTWpxVnAwcFA1UXBWWlE9PQotLS0tLUVORCBDRVJUSUZJQ0FU
      RS0tLS0tCg==

  HVRPrivKeyBase64:
    Description: |
      Specify Hubserver private key (to be entered as a base64 string) to be used for secure communication, a default key is provided for testing.
      A method to get this string from your public certificate, is using the base64 utility, example: "cat hvr.priv_key \| base64"
    Type: String
    NoEcho: true
    Default: |
      LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZB
      QVNDQktnd2dnU2tBZ0VBQW9JQkFRQ2hZbCtaeDhMaDdKU2sKOENMbmpOT1p1b3VTSkFuZlg1WGQy
      NWJTWGRqSUpKeEZTRlJPcU5aaHBXT2c0cURCd3BzdEhQY051M2xZMG1VNgptWThGTW5ZRmkyNElK
      YUR0Zmw1Qk96RjFVOUlQRGhJSTBCcTBualdFSitqMDVMSHBKZUVRTzBWQkdrT0FsMnc5Cm5Bcktq
      aERRUDNrR1R6aW1XQUVKNGlBWGlkWmVDZjZjK1BkU09KVG1pdCtwbEFGWkdnMVplMzhuYWJvUzk2
      aXMKUHk1dDRiSUpxbW9jVzFvMVR6MGlkek10d2NKaWdNY3ZRUlZqdHRzeFdMRVJFMmR5Sk02VllP
      NUptdjcxOUlQQQp3dDBSOU9laExEUEc5ckh6Z0NEQWkrV1p0amVuK1NvSTlwY011c0Jqdzdha2xO
      NVJZMHNKQWlxdFBvZ0ptYnN4CllsRkkrbCtqQWdNQkFBRUNnZ0VCQUlRKzRLaGJrYzhnMXczeDJp
      aDB0bEViRkpSRkEvSVBtZmVib2hQdzQxdmUKNUUvQjNaUTN0clY5bWc2VXA3Y2ZpWm1HU3N6dCs1
      cFZqcTVlZDF5QzVVUFY1ZXkzS1JCMHBUZy9FV0JidDU2dQpvUWludjdxU2lyZ3BIRFRSMHhpQytk
      TWJQcjBDa0o0bmQ0TmxBMUxJNSs0K2xTWWVkUVdheC84WlZjTDBLTDRWCmxTNmxDVW1jcTNldk94
      NkNJUm9jVnM3QXg3VC9melRRN3ZobWJ2SDNtcStOaVo1SExqWE0zTU1tVTdSNGdoWFAKVGFyQzdN
      Tnh0d0RYakRMQWxrRG1NSEpVM3Q3WjZhb0o0dWNHWkRqbXVqa3luSnpEakh5QXg4c0gwL1FhT1Yv
      SwpQdHFlaFJtUSs4T3pyWWFKNGFYa09qcnk3aVp1Q3dTSGpuR05wYVBHdlVFQ2dZRUEwOVhOSEZ2
      VnRHN2VobVRNCkdrV01FbGpuNzFkS2ptUk1ueldvWm5WeVB5TDhNdmk0dy9pM29ZOVBOQU1sWFFJ
      cWpBSGp0bEpra0U0Nmd2Y3cKeHdBUy9KVXJJUUcyU2IySzRBYzdVMjgvWUFLVHZ6bk52YXNuTUYr
      NDdNZ1RxT0V5VHdGa201eVBSMVYxUHJvMQoxZDlqd0hJb25UdVpCOHBoL0Z1eFhmRnZiRThDZ1lF
      QXd3ZmdNaVU1eUFDUW5Ia25QZTE0VU1ESFVYa1FQV1Q5Cm5vYkZSVkZ6QXVjWlZMYTN4THpUVUpu
      M3VTenF4UzNxY2ZlaE56bHlXalNLL2tUWExuUCtTZTdMbHh5SHUzNXAKV1Z0eHYwRzN3OHY5d0k2
      dlFuV0RJa2RhRFFMOWhZbklIdGsxN1B3TzJLTk5idFF0ODlDOFR4Q0RqWTFHTzZGQQpIdmU1Nm9h
      b0htMENnWUFwTUc1RWNGcmFUYUI1RTBwWVpXTjZBYzEvVFVMUzh3K3UrVmo0S3lmK3ZNZTdCWCt2
      Cm8wSFphU3NtV3VJOTluamRabFNuazllMzgyNFBIdzlkOGxhK3hDWnhzWXFIUmhLbHd1STNNKzlu
      dExpVHV5S1YKR1oxeUczcXlsNml5OHE2OGkvSExEQ01UNUxyNmFteWpYRjlpQVJDQ21oOEVVOGEv
      c2ZpSDRyVWVvd0tCZ0N4VAphdW9hdWRJeUJxdjVnU2k3QXlCZllDMnROVHF1N0ZHT1VlR2FUR2g1
      ZTdGY1FkSU9GSHo2TVdvOXdqSUVhSWQwCmY0aWNudGZQbjFPQTgrTVQ2OVNEMkhQRXdUaWsxMjYr
      c05DR01Dem8vUWc1cGEyV0piS3h3czY0UWtTS2R4aEQKeDlUUHlOUUY4WUJoNnZ2Q0VqcHFCMnd4
      a3FmVTAwejJncVBCN1EzVkFvR0JBSUxSdXBiaEVRTXA2VFZ2eGR3SApISjZlMU1IQXZsZkcyVzBs
      akxuSkxVWFM4Z1ZJbnlQTmgxcUJNbFRMRWRSQzdNMnhtVzRkeWZmS25xRVNUS25CCmtpeTZHR0Rs
      WVNucUxwbjc3eU9sWUw0bE54YUcwTW5PTE9mUXRxOEFqM1VoNTZnU2Mxbmtrd1RoZ2FzbThQeGsK
      S1c4bnpncVhvbksvYUZvcUVoWDB0S3V0Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K


  ## The default public key below is a sample public key, with corresponding private key being defined below.
  ## These are used internally to allow secure communication between the HVR Hub and Agent.
  ## When starting an HVR Agent (hvragentlistener) a new set of private/public certificates are created and
  ## stored in HVR_CONFIG/etc/hvragent.conf.  
  ## As we want the agents to use specific set of keys, we provide these as input and during Agent instance creation
  ## these values will be extracted from secrets manager and a new HVR_CONFIG/etc/hvragent.conf file will be created
  HVRAgentPubKeyBase64:
    Description: |
      Specify HVR Agent Public key certificate (to be entered as a base64 string) to be used for secure communication between the hub and agents, a default key is provided for testing.
    Type: String
    NoEcho: true
    Default: |
      TFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVTXJha05EUVdWTFowRjNT
      VUpCWjBsQ1FVUkJUa0puYTNGb2EybEhPWGN3UWtGUmMwWkJSRUZ5VFZOcmQwcDNXVVJXVVZGRVJF
      TkNTVlpzU1djS1VWZGtiR0p1VVhOSlIyUnNZbTFXZVZsWVVteGFRMEoyWW1sQ2IyUnVTbWhhTWxa
      MVpFUkJaVVozTUhsTmFrRXlUVVJuZVUxNlJYZE5la3BoUm5jd01BcE5ha0V5VFVSTmVVMTZSWGRO
      ZWtwaFRVTnplRXRVUVc1Q1owNVdRa0ZOVFVsRmFGZFZhVUpDV2pKV2RXUkRkMmRhTWxaMVdsaEth
      R1JIVm10SlJ6bDFDa2xIYURKamJVWnVXbGMxTUUxSlNVSkpSRUZPUW1kcmNXaHJhVWM1ZHpCQ1FW
      RkZSa0ZCVDBOQlVUQkJUVWxKUWtOQlMwTkJVVVZCZURWcVNYZDJTVlVLTnpKTVFtZGFTM1pzUVRa
      MlVraDVOa0ZNTldGd2NTdGFRV1pRUm5aUU0yWXZWbWcwUWt0b1kzZ3dhV2gxT0hGNldGSlFPWHBy
      VFRCcmFqQklOalJJV0FwcVFrSlZTU3ROVEV4RVZIaFpTM1pHYjBoQ1drUkNWV3BwTnpWMlYyTlVZ
      emhsTDB0R0wyUmlha0ozT1RSeU4wOHZlbU5SWms1MlVXSjRNVkV4Y3k4ekNuTkpaM2g0WkZOUlIw
      dGhSM2RNTlUxR2Nrc3lWa0ZUVUdKRWEwcGhkbU5qSzA4d2FWVldjM0V4WVdoRWNrMVZjVkF3TVN0
      dVZFVTNkRlpuUTFFMlQxZ0tWMnhKU21OWWJYbEpibXNyVWtobVV6Qk9SREpqVkVsbVVqSk1LM1Z2
      VHprdlJXeGpUR0ZuUTBkVE5sQmxhRmgyVDJsSmMyWTVabmhCUzAxU1FrRm5Rd3BCYXpNMGNFeDRW
      M2xSWTBwdGFtMHhXbkZaU21sclFXSnhTWGszVjBsTVkxRXlNVUZZTTJWRE5WUk9OSEJ0WlRGemQz
      bGhaQzl0YWpKbFdsTmFWR3g2Q2t0dmNHNU5VR2RqTDBwRE1qWlJTVUpCTmsxeVRVTnJkMHAzV1Vw
      WlNWcEpRVmxpTkZGblJVNUNRbTlYUjBWa2JHSnRWbmxaV0ZKc1drTkNhV1ZUUWtrS1ZteEpaMDVw
      TkhoTWFrRjJUbFJCVGtKbmEzRm9hMmxIT1hjd1FrRlJjMFpCUVU5RFFWRkZRV1J5Tkhaak5FWlZO
      WFpIUzNGbkwzVklla2RrU2xOS1VRcHNaV014Y1VSMGFYTndObGR2VmtremJXaHZWVGRLWmxZNFZY
      RlRkMjEyVWtGbllVdGpNV1JPV1Vjd1VIUXpSekpYTTNZd1NuRklhV1pqV21Od1FWcEpDalo1WlZo
      d1FtcEVVM0Z4VEZwdGJuVjJiSGQyUld0RGRuRmlZV0l4VXpoMFZWcHNVMlpZTTJaS01UVnVjSEJa
      VWtONWNGUnlla3BKUzB4U1dVOTJVbFFLTlRaSVUydHdiSE5hY0U5U2JESldhRWxqYzJVNFkzbE9W
      VVIxUldoYVRIZFZVMGhRV0ZVeFVFVnVUVk5XU1daQmFubEtORmh3VGpoUmFUWnRNVTB5VUFwQmQy
      YzNObmRwU0dkd1ZWaE1OVWhNZGt4clYyOUtkazF0UjJvMlUwUjZRWGhNVG5SSVMyZFpkMmxEUjFw
      bU5rWk1NUzluUkV4YWRrbzNaamhtU25WbkNuWlBVRnBMU0c5b00yeDNaakJJV1hoQ1VYbE9lV1o2
      UWxGVmEwSjJORTU0UzFnd1RVNUdhRkIwTVVaeEswOTZjWGhxZUZGTFFsQlJaREpoYzJkUlBUMEtM
      UzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0K

  HVRAgentPrivKeyBase64:
    Description: |
      Specify HVR Agent Private key (to be entered as a base64 string) to be used for secure communication between the hub and agents, a default key is provided for testing.
    Type: String
    NoEcho: true
    Default: |
      TFMwdExTMUNSVWRKVGlCRlRrTlNXVkJVUlVRZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFwTlNVbEdU
      RlJDV0VKbmEzRm9hMmxIT1hjd1FrSlJNSGRUYWtGd1FtZHJjV2hyYVVjNWR6QkNRbEYzZDBoQlVV
      bDBTM2wwUmpWT09GUXZNRU5CWjJkQkNrMUJkMGREUTNGSFUwbGlNMFJSU1VwQ1VVRjNTRkZaU2xs
      SldrbEJWMVZFUWtGRmNVSkNRa0pTZUZoTFpIaE5ObGxSWjBGR1pVOVJNMHR0WmtKSlNVVUtNRTVJ
      ZEd3cmJERkdXRUV4Tm13M1NURjFkVzQzYkdoeE5VcDZjMkZIZWpoMU1uWXpMM0ZVVWxWak9UWk1k
      VUkyUmprNGQyVklOaXRNYnpWalEySjVVZ3BhVWxOVlRGVlVjVGxPVFU0MFJHdEZTVTE2TTNCQ2Ns
      VmtSRU5NZFRsMFdFTXhOMFV4WlhaeEx5OHpiRVZsYVRZeFkzQnhZazlMYW1rd00zcDRZMndyQ25K
      UVFqWnpSalZ3Y2pGRk1XOWpRemxTWTBWSFJuTktUM2hZTkRGc1JtZ3dhVFZuTVhCcGNFcDJPSFpJ
      U1hCb2JUVmpNV1JGUVRsWFMwRlBkaTgyUjJVS1kyVktUVGR5VTNaUFVYUXJZemN6VWtablpsQmxL
      MmhXZEVsellURktNM2RIVEdoV1FWWmpaVzVEWTFZdlJuZ3hkMmx1VERVd1Z6QkJiR2hCTlV4eVVn
      cG9XRTAzVVVoaWFWUXdSMjR6UWtFdmFEVk5ZVmt4T0ZWak5XSTFaWFZQTTBzdkszTm5jakJYVGtG
      cGFEQkhRVmRWY2pKb2NtSnRaMEo2UjBob2JraFJDaXRGYkhOVGNERjJRMVpuWVhGRmNIRm5NR1JT
      YzA0MU0xRlFkVk5LTkZCUE1rOXNUR1Y2VmtaaFZrOTVVRXh4VjBnMk9XbDRXbWhtYW5CNk5XdHRV
      QzhLZWs5MmJtSjJTVkpKY3pCMWQwWnpNR0l3ZEUxa1MwcEdXa1pGZG10U2RFTTVaM2hFTWxCd2Qy
      cG9ZMEZuVmpSV1kzWnhNMnhQZW1odk5GWkJOWEJrUVFwWmRXRjZiRU5zVFU5VmVFNUtSekp4Y21o
      Q0t6Vm1iMnhWT0VKU1NHVjVZbHBtY0Vsck0xZHRja0pCYWpST2MwSXlOVzEzVVdSaVRFSlJlakpU
      VDBOR0NsVlRhamh3UmpKTU1VVk5jM05ZU0RsUmJFZEJMMnd6WVRWMVp6bHdhazExV0U4dlRHTTBT
      SFk1WXpkVlRUSTVaM3BOWVhoUWVXMUNTMWh3TW1Oek1rWUtLMlJZU1VGdE9TOUVObmhwYVVRd2Qw
      VnNabTlZVG5neVQzSkNNbmRQUTNaNFFsSlhVbGhoYzFJclQwUnBORlE0VDJsSVFqVldZekJCY1Za
      S1QzWlZWUXBJS3pKT2VWVjVlRTkyVUdVdlUwVnhZbFkzUTFBeVZqVlpOSGR6VUVaMVN6RjFabHBP
      VkRKVFJIQXZkVXB1UkU1UUwxTTFSMXBsZGtSc01DOUlTSE5NQ205SVFUTnVaa3BHTkVVNVZqTlZX
      a3RDY2twTU9ERnViVUoyYnpocWF6SnRNRFZUVG1kb1UzVnFiR05XTWtNeWRHZE1PVWxTVVdGSWIz
      VjViRE52VEZZS2EwTk9TRkkzUWpCSk1tNUVkVmxaZVV0ek9FMXNVVXRsVGtwVVFXdE1iV0ZsZWxW
      NWIzVnFjRGxrVkd4dlRtTlRZV0ZRWTFaNGRFdHNUak53V1Vob1dRcEROM0ZGTlU1cFlWVnJjVlY2
      UTBGdFZ6TnVObkJIY0M5VFVIUTFTVk51WWpsblZWVjZXa3hQWmxONE9YTnZWekpDWVRWbFVWZGxZ
      VzV3ZFRSM1VXOWlDamhZYkdoNFQxZDFSblZFTWtVeFNGVlNUVGhPZEd3NVNHWkJTMlJQUm5OVWRH
      bFVUVnByWVVsSFREY3ZWRmRzYTBkSFFUY3dXbEYzWmxrdk1VMUZTbUlLYlRacGJVYzRiVkEzTWpW
      UVEyOVROMHB1VEhwRE1HdFFNVVYyY1VsNVRIWkZWR2RTVlVKWGRYcENjRGc0YkRKQmNWRkxPVzFZ
      TmtOUEwwNUVRbkJhYndwcGRUTmhRWFZQUWpSNmJuRkZjMDQ1WkNzemVIRnBWblF6VEhBeE1XTlNT
      MlU1ZEhJeWEwa3lhMGRYYlcxeWVERkNNSHAxTTJ4UlYzQkVlRGwwSzFwckNtNWpZVVJQU3lzemQw
      ZDFRVWgyUnpsTU1XaExORFo2TkV4UFpXOW5aMHd4VEhGYVV6bE5hbkI0WkhRd2FDOVpTMXB6TUc5
      RmFUWmxhRlY0YzAweFZGQUtVbmh5TTNkR2JWZHpibTE0V1hjMVNrdGpORE55Y0dKT05YZzBiR2RV
      VFM5TVkwbG9SbUZSTTJWc1dUQkRVREJQUTA4MFJ5OW9UR1J3VkZFM1RVTTJad3ByYm5nMlZtcGpO
      R2hUYmtwTmQwczNVV2hMY1VwaU9GWlFhVE55VDBrcldVTnhUVUl3WkdWdVMwNHlXbHBJUnpVelVr
      b3dVaTlLTTBoR1l6Um1TSFYyQ204dlFtaHFiemcyYkUxcVVXaFFURU5OV1ZaSFpsVlJObTFYUzFj
      cmExaG5NelUxVGxWTWJYaDVWV1ZCUzJWVk1YTlBWM05ZTDBaMVJVeG5kbGhTWjBRS1RESlNlbFUy
      VGtScFprdFZNRWxIWTNnM2RYQXplRzFMZGtOSlJ6SXpaeXQ0ZW5OSGRuTlFaR2xRYWtjdmFUVnNZ
      MFZpZWxsS2MyNXpMMlZZVVZkTk5BcE5XRFpJUjFseFNYUTFOVTFxUjI5TlFYb3hjVW93VlZZMk9I
      VlZiQzgwV1ZZMmRuRTJibko1YmpSTWNHSTJkRzlSTmxwT01qZEJjM0JVU0dKNWNrRXdDbkpXTkVk
      SlkwZFdWaTlQVGpGTEwxb3djbUZ6TUhSTWNYTmtUbWRyYkhWSVRYQlpRa1VyVjBveE5EVllWRmRL
      UlVwaEx5czJka2MwV1VZcmVUQjVSbmtLYWtaRFNEWnVSRFJZV0hSNlFXNTFaRFprZEhVellYa3pS
      VXAwY1dKM1NscGtja3B3TkM4eFkxVnZZMlpIYzBkb1NHTjRZMFZKYVdac2JWUjJSRXhRVmdwT1JF
      dDNhMWhvVHl0SlRrWXZaMDlTWkZNM1JtaDRVMkZPTURaVU9WRnRPV3h3ZWk5blJXRmxSVlkzU3dv
      dExTMHRMVVZPUkNCRlRrTlNXVkJVUlVRZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFvPQo=

  HVRAgentPrivKeyPasswordBase64:
    Description: |
      Specify HVR Agent private key (to be entered as a base64 string) to be used for secure HVR communication between the HVR hub and agents. A default Private Key Password is provided for testing.
      A method to get this string is using the base64 utility, example: "echo 'yout string' \| base64"
    Type: String
    NoEcho: true
    Default: |
      IXtvOitxcUQrWXM4U2ZrRkNwOUt6ZmNXdXI0bytSbzREMVdoQm9uWDJyZVZoQzROei9JV3VrdVpu
      VEYyb2ZqZEFoR2Y5UGJKfSEK

  HVRLicenseSecret:
    Description: |
      Please specify the ARN to the AWS Secret (to be located in AWS Secrets Manager) that can be used for the HVR deployment.
      If no value is specified a temporary dummy Secret will be created in Secrets Manager as hvr/quickstart/{TagEnvironment}/hvrlic.
      If you require a license please contact the HVR Software sales team and leave the value as "none".
    Type: String
    Default: "none"

  # Parameters below are specific to the HVR Hub Repository Database.
  # This should be ideally an RDS Aurora / PostgreSQL database
  HubDatabaseUsername:
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "Must begin with a letter and contain only alphanumeric characters."
    Description: HVR Hub repository database user, default [hvrhub].
    Default: "hvrhub"

  HubDatabaseUserPassword:
    Type: String
    AllowedPattern: >-
      ^(?=^.{8,255}$)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)((?=.*[^A-Za-z0-9])(?!.*[@/"'])).*$
    ConstraintDescription: >-
      Min 8 chars. Must include 1 uppercase, 1 lowercase, 1 number, 1 (non / @ " ') symbol
    Description: Password for the HVR Hub repository user (hvrhub).
    MaxLength: "64"
    MinLength: "8"
    NoEcho: true

  HubDatabaseName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]*"
    MaxLength: "64"
    MinLength: "0"
    Description: Specify the Name of the HVR Hub database, default [hvrhub].
    Default: "hvrhub"

  HubDatabaseEndpoint:
    Type: String
    Description: Specify the Hub Database Hostname / or RDS endpoint.

  HubDatabasePort:
    Type: Number
    ConstraintDescription: 'Must be in the range [1115-65535].'
    MinValue: 1150
    MaxValue: 65535
    Description: Specify the Hub Database Port, default [5432]
    Default: 5432

  LogGroupName: 
    Type: String
    Default: quickstart-hvr
    Description: Specify Log Group Name for EC2 Cloudwatch logs agent [default is quickstart-hvr]


######################################
## Condition definitions
######################################
Conditions:
  IsAcceptedEULA: !Equals
    - !Ref AcceptedEULA
    - "yes"

  NoHVRLicenseProvided: !Equals
    - !Ref HVRLicenseSecret
    - "none"

######################################
## Mapping definitions
######################################
#
##  You can get the mapping below by using the ec2 describe images option and listing the HVR version you are looking at using
##  from the AWS Marketplace - using the BYOL HVR image is recommended.
#
# version=5.7.0.12-byol
# for region in `aws --region ap-southeast-2 ec2 describe-regions --output text | cut -f4`
# do
#    echo -e "$region:"
#    aws ec2 describe-images --region $region --owners aws-marketplace --filters "Name=name, Values=*hvr-${version}*" --query 'Images[*].[ImageId,CreationDate]' --output text | sort -k2 -r | head -n1 |cut -f1
# done
#
#
Mappings:
  RegionMap:
    eu-north-1:
      AMI: ami-06b826f132b5f423a
    ap-south-1:
      AMI: ami-012e016a2a1906777
    eu-west-3:
      AMI: ami-0437ef0a8e9311ef3
    eu-west-2:
      AMI: ami-03dd0b4724d92cd7b
    eu-west-1:
      AMI: ami-0569bc16a19b247a3
    ap-northeast-3:
      AMI: ami-0445dfdde3b121b64
    ap-northeast-2:
      AMI: ami-0e544ffe3d58838ce
    ap-northeast-1:
      AMI: ami-09c75c50ce7aec21e
    sa-east-1:
      AMI: ami-0fb5f56b8c9a86914
    ca-central-1:
      AMI: ami-02be9479a96e57e7d
    ap-southeast-1:
      AMI: ami-02abaf93b2099aa78
    ap-southeast-2:
      AMI: ami-037a762f79651e419
    eu-central-1:
      AMI: ami-05e2c5f91c4c3c558
    us-east-1:
      AMI: ami-0b2424d0d882ab9e6
    us-east-2:
      AMI: ami-0a35c12ea7a0fb5e7
    us-west-1:
      AMI: ami-0edcdc79dcbd4c922
    us-west-2:
      AMI: ami-0a762c354d9412d62


######################################
## Declaration of stack resources
######################################
Resources:

  ## ------------------------------------------------------------ #
  ## Create Log Group for EC2 logging if required
  ## ------------------------------------------------------------ #
  CloudwatchLogGroup: 
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties: 
      LogGroupName: !Sub ${LogGroupName}
      RetentionInDays: 3

  ## ------------------------------------------------------------ #
  ## Create Secrets Manager Secret to hold the HVR License Key
  ## ------------------------------------------------------------ #
  HVRLicKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub hvr/quickstart/${TagEnvironment}/HVRLicKey
      Description: HVR Quickstart License Key
      Tags:
        - Key: Name
          Value: !Sub HVRLicKey-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create Secrets Manager Secret to hold the HVR Hub Cert
  ## - this is used to create secure connections with agents.
  ## ------------------------------------------------------------ #
  HVRHubPublicCert:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub hvr/quickstart/${TagEnvironment}/HVRHubPublicCert
      Description: HVR Hub Public Certificate
      Tags:
        - Key: Name
          Value: !Sub HVRHubPublicCert-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create Secrets Manager Secret to hold the HVR Unix User Password
  ## ------------------------------------------------------------ #
  HVRAdminUserPassword:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub hvr/quickstart/${TagEnvironment}/HVRAdminUserPassword
      Description: Autogenerated HVR WebUI Admin User Password
      GenerateSecretString:
        PasswordLength: 16
        ExcludePunctuation: true
      Tags:
        - Key: Name
          Value: !Sub HVRAdminUserPassword-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create Secrets Manager Secret to hold the Hubserver Private Key for HVR encrypted communication
  ## with the hubserver HTTPS
  ## ------------------------------------------------------------ #
  HVRPrivKey:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub hvr/quickstart/${TagEnvironment}/HVRPrivKey
      Description: Private Key to be used for Secure HVR communication
      SecretString: !Ref HVRPrivKeyBase64
      Tags:
        - Key: Name
          Value: !Sub hvrPrivKey-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create Secrets Manager Secret to hold the Hubserver Public Key for HVR encrypted communication
  ## ------------------------------------------------------------ #
  HVRPubKey:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub hvr/quickstart/${TagEnvironment}/HVRPubKey
      Description: Public Key to be used for Secure HVR communication
      SecretString: !Ref HVRPubKeyBase64
      Tags:
        - Key: Name
          Value: !Sub hvrPubKey-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create Secrets Manager Secret to hold the Agent Public Key for HVR encrypted communication
  ## ------------------------------------------------------------ #
  HVRAgentPubKey:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub hvr/quickstart/${TagEnvironment}/HVRAgentPubKey
      Description: Agent Public Key to be used for Secure HVR communication
      SecretString: !Ref HVRAgentPubKeyBase64
      Tags:
        - Key: Name
          Value: !Sub hvrAgentPubKey-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create Secrets Manager Secret to hold the Agent Private Key for HVR encrypted communication
  ## ------------------------------------------------------------ #
  HVRAgentPrivKey:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub hvr/quickstart/${TagEnvironment}/HVRAgentPrivKey
      Description: Agent Private Key to be used for Secure HVR communication
      SecretString: !Ref HVRAgentPrivKeyBase64
      Tags:
        - Key: Name
          Value: !Sub hvrAgentPrivKey-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create Secrets Manager Secret to hold the Agent Private Key Password for HVR encrypted communication
  ## ------------------------------------------------------------ #
  HVRAgentPrivKeyPassword:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub hvr/quickstart/${TagEnvironment}/HVRAgentPrivKeyPassword
      Description: Agent Private Key Password to be used for Secure HVR communication
      SecretString: !Ref HVRAgentPrivKeyPasswordBase64
      Tags:
        - Key: Name
          Value: !Sub hvrPrivKeyPassword-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}


  ## ------------------------------------------------------------ #
  ## Create S3 Bucket to store NLB Access Logs
  ## - explicit block public access
  ## ------------------------------------------------------------ #
  NLBAccessLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'

  ## ------------------------------------------------------------ #
  ## Create S3 Bucket Policy (NLB Access Logs)
  ## ------------------------------------------------------------ #
  NLBAccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: NLBAccessLogsBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: "AWSLogDeliveryWrite"
            Effect: Allow
            Principal:
              Service: "delivery.logs.amazonaws.com"
            Action: 's3:PutObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref NLBAccessLogsBucket
                - /AWSLogs/
                - !Ref AWS::AccountId
                - /*
          - Sid: "AWSLogDeliveryAclCheck"
            Effect: Allow
            Principal:
              Service: "delivery.logs.amazonaws.com"
            Action: 's3:GetBucketAcl'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref NLBAccessLogsBucket
      Bucket: !Ref NLBAccessLogsBucket

  ## ------------------------------------------------------------ #
  ## Create Security Group for the HVR Agent EC2 Instances
  ##  -  Allow SSH, and Webdesktop via Bastion host to Hub
  ##  -  Allow HVR port on internal subnet for communication with agents
  ##  -  Allow EFS Port for Mount
  ## ------------------------------------------------------------ #
  HVRSecurityGroupHUB:
    Condition: IsAcceptedEULA
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the HVR Hub
      VpcId:
        Ref: VPCID
      Tags:
        - Key: Name
          Value: !Sub hvr-SG-Hub-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}
      SecurityGroupIngress:
        ## Allow ICMP
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VPCCIDR
        # Bastion HVR GUI to Hub Communication
        - IpProtocol: tcp
          FromPort: 4341
          ToPort: 4341
          CidrIp: !Ref VPCCIDR
          Description: Allow HVR Port 4341 from within VPC
        ## Bastion SSH to Hub
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VPCCIDR
          Description: Allow SSH from within VPC
        ## EFS
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref PrivateSubnet1CIDR
          Description: Allow EFS on private Subnet1
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref PrivateSubnet2CIDR
          Description: Allow EFS on private Subnet1
      SecurityGroupEgress:
        ## Allow TCP outbound
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
          Description: Allow outbound TCP access

  ## ------------------------------------------------------------ #
  ## Create Security Group for the HVR Agent EC2 Instances
  ## ------------------------------------------------------------ #
  HVRSecurityGroupAgent:
    Condition: IsAcceptedEULA
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the HVR Agent
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub hvr-SG-Agent-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}
      SecurityGroupIngress:
        ## Allow ICMP
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VPCCIDR
        ## Hub/NLB Communication
        - IpProtocol: tcp
          FromPort: 4343
          ToPort: 4343
          CidrIp: !Ref PrivateSubnet1CIDR
          Description: Allow HVR Port 4343 on private Subnet1
        - IpProtocol: tcp
          FromPort: 4343
          ToPort: 4343
          CidrIp: !Ref PrivateSubnet2CIDR
          Description: Allow HVR Port 4343 on private Subnet2
        ## ssh in private subnets
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PrivateSubnet1CIDR
          Description: Allow SSH on private Subnet1
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PrivateSubnet2CIDR
          Description: Allow SSH on private Subnet2
      SecurityGroupEgress:
        ## Allow TCP outbound
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
          Description: Allow outbound TCP access

  ## ------------------------------------------------------------ #
  ## Create EFS Filesystem
  ## ------------------------------------------------------------ #
  FileSystem:
    Condition: IsAcceptedEULA
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      # Enable default encryption on EFS filesystem
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub HVREFS-${AWS::StackName}-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create EFS Mount Target
  ## ------------------------------------------------------------ #
  MountTarget1:
    Condition: IsAcceptedEULA
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: PrivateSubnet1
      SecurityGroups:
        - Ref: HVRSecurityGroupHUB

  ## ------------------------------------------------------------ #
  ## Create EFS Mount Target
  ## ------------------------------------------------------------ #
  MountTarget2:
    Condition: IsAcceptedEULA
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: PrivateSubnet2
      SecurityGroups:
        - Ref: HVRSecurityGroupHUB

  ## ------------------------------------------------------------ #
  ## Create the Auto Scaling Group for the HVR Hub
  ##  - 1 EC2 Instance running at a time
  ## ------------------------------------------------------------ #
  HVRHUBAutoScalingGroup:
    Condition: IsAcceptedEULA
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub hvr-hub-ASG-${TagEnvironment}
      LaunchTemplate:
        LaunchTemplateId: !Ref HVRHUBLaunchTemplate
        Version: !GetAtt HVRHUBLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      MinSize: "1"
      MaxSize: "1"
      Cooldown: "900"
      DesiredCapacity: "1"
      Tags:
        - Key: Name
          Value: !Sub HVRHub-${TagEnvironment}
          PropagateAtLaunch: true
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref HVRHUBNLBTargetGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  ## ------------------------------------------------------------ #
  ## Create the Auto Scaling Group for the HVR Agents
  ##  - 1 EC2 Instance (Agent) per AZ
  ## ------------------------------------------------------------ #
  HVRAgentAutoScalingGroup:
    Condition: IsAcceptedEULA
    DependsOn:
      - HVRHUBAutoScalingGroup
      - HVRHubPublicCert
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub hvr-agent-ASG-${TagEnvironment}
      LaunchTemplate:
        LaunchTemplateId: !Ref HVRAgentLaunchTemplate
        Version: !GetAtt HVRAgentLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      MinSize: "2"
      MaxSize: "4"
      Cooldown: "900"
      DesiredCapacity: "2"
      Tags:
        - Key: Name
          Value: !Sub HVRAgent-${TagEnvironment}
          PropagateAtLaunch: true
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref HVRAgentNLBTargetGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  ## ------------------------------------------------------------ #
  ## Create the Launch Template for the HVR HUB EC2 Instances
  ## ------------------------------------------------------------ #
  HVRHUBLaunchTemplate:
    Condition: IsAcceptedEULA
    DependsOn:
      - FileSystem
      - HVRHubPublicCert
      - HVRLicKeyWaitCondition
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub hvr-hub-LT-${TagEnvironment}
      LaunchTemplateData:
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
              - HVRInstanceProfile
              - Arn
        ImageId:
          Fn::FindInMap:
            - RegionMap
            - Ref: AWS::Region
            - AMI
        SecurityGroupIds:
          - !Ref HVRSecurityGroupHUB
        InstanceType: !Ref HVRInstanceTypeHUB
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: True
            VolumeType: gp3
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: True
            VolumeType: gp3
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -x

            # log to console and /var/log/user-data.log for debugging
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            yum update -y
            yum install -y amazon-cloudwatch-agent

            ## create basic sample config to log user data to cloudwatch logs
            cat << EOF > /opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-agent.json
            {
                  "logs": {
                        "logs_collected": {
                              "files": {
                                    "collect_list": [
                                          {
                                                "file_path": "/var/log/user-data.log",
                                                "log_group_name": "${LogGroupName}",
                                                "log_stream_name": "{instance_id}-hub-user-data"
                                          }
                                    ]
                              }
                        },
                        "log_stream_name": "{instance_id}"
                  }
            }
            EOF

            ## Now lets start the agent with above sample config
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-agent.json -s

            export HVR_HOME=/opt/hvr/hvr_home
            export HVR_CONFIG=/opt/hvr/hvr_config
            export HVR_TMP=/opt/hvr/hvr_tmp

            # See if already configured
            if [ -f $HVR_CONFIG/.quickstart-configured ]
            then
                # only need to start hvrhubserver
                systemctl start hvrhubserver.service

            else
                rm -rf /opt/hvr/hvr_config
                mkdir -p /opt/hvr/hvr_config

                if [ "$HVRLicenseSecret" = "none" ]; then
                    echo "No license provided, will not do any base configuration"

                else
                    
                    REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
                    
                    aws --region $REGION secretsmanager get-secret-value --secret-id ${HVRLicenseSecret} --query 'SecretString' --output text > /home/hvr/hvr.lic
                    chown -R hvr:hvr /home/hvr/hvr.lic

                    # Create EFS Mount Point - sleep might be required if FS and DNS not ready yet
                    EFS_MOUNT_OPTIONS=tls,_netdev,defaults
                    mount -t efs --options $EFS_MOUNT_OPTIONS ${FileSystem}:/ $HVR_CONFIG
                    echo "${FileSystem}:/ $HVR_CONFIG efs $EFS_MOUNT_OPTIONS 0 0" >> /etc/fstab

                    # # Get hubserver certificates
                    mkdir -p $HVR_CONFIG/etc/cert
                    aws --region $REGION secretsmanager get-secret-value --secret-id ${HVRPrivKey} --query 'SecretString' --output text | base64 -d > $HVR_CONFIG/etc/cert/hvrhubserver.priv_key
                    aws --region $REGION secretsmanager get-secret-value --secret-id ${HVRPubKey} --query 'SecretString' --output text | base64 -d > $HVR_CONFIG/etc/cert/hvrhubserver.pub_cert
                    chown -R hvr:hvr $HVR_CONFIG
                    chmod 0644 $HVR_CONFIG/etc/cert/hvrhubserver.pub_cert
                    chmod 0640 $HVR_CONFIG/etc/cert/hvrhubserver.priv_key

                    # Configure and Start HVR Hubserver (Web Interface)
                    systemctl stop hvrhubserver.service
                    systemctl start hvrhubserver.service

                    HUBADMIN_USERNAME=admin
                    HUBADMIN_PASSWORD=`aws --region $REGION secretsmanager get-secret-value --secret-id ${HVRAdminUserPassword} --query 'SecretString' --output text`

                    # Base configuration
                    su - hvr -c "cd /opt/hvr/hvr_home/bin; \
                    HVR_HOME=/opt/hvr/hvr_home \
                    HVR_CONFIG=/opt/hvr/hvr_config \
                    HVR_TMP=/opt/hvr/hvr_tmp \
                    ./hvrhubserverconfig HTTPS_Port=4341 HTTP_Port=4340 \
                    HTTPS_Port=4341 HTTP_Port=4340 \
                    Repository_Class=postgresql \
                    License_Agreement_Accepted=true \
                    Database_Host=${HubDatabaseEndpoint} \
                    Database_Port=${HubDatabasePort} \
                    Database_Name=${HubDatabaseName} \
                    Database_User=${HubDatabaseUsername} \
                    Database_Password='${HubDatabaseUserPassword}'"
                    
                    # Create repository with tables
                    su - hvr -c "cd /opt/hvr/hvr_home/bin; \
                    HVR_HOME=/opt/hvr/hvr_home \
                    HVR_CONFIG=/opt/hvr/hvr_config \
                    HVR_TMP=/opt/hvr/hvr_tmp \
                    ./hvrreposconfig -c"

                    # Disable wallet                  
                    su - hvr -c "cd /opt/hvr/hvr_home/bin; \
                    HVR_HOME=/opt/hvr/hvr_home \
                    HVR_CONFIG=/opt/hvr/hvr_config \
                    HVR_TMP=/opt/hvr/hvr_tmp \
                    echo \"$HUBADMIN_PASSWORD\" | ./hvrwalletconfig -c -p Type=SOFTWARE Auto_Open=true"

                    # If wallet is required:
                    # echo "<passphrase here>" | hvrwalletconfig -c -p Type=SOFTWARE Auto_Open=true

                    # Apply license                  
                    su - hvr -c "cd /opt/hvr/hvr_home/bin; \
                    HVR_HOME=/opt/hvr/hvr_home \
                    HVR_CONFIG=/opt/hvr/hvr_config \
                    HVR_TMP=/opt/hvr/hvr_tmp \
                    ./hvrlicense -f /home/hvr/hvr.lic"

                    # Configure hub name and description                  
                    su - hvr -c "cd /opt/hvr/hvr_home/bin; \
                    HVR_HOME=/opt/hvr/hvr_home \
                    HVR_CONFIG=/opt/hvr/hvr_config \
                    HVR_TMP=/opt/hvr/hvr_tmp \
                    ./hvrhubconfig -c hvrhub Description='hvrhub using quickstart'"

                    # Configure hub admin user and description                  
                    su - hvr -c "cd /opt/hvr/hvr_home/bin; \
                    HVR_HOME=/opt/hvr/hvr_home \
                    HVR_CONFIG=/opt/hvr/hvr_config \
                    HVR_TMP=/opt/hvr/hvr_tmp \
                    echo \"$HUBADMIN_PASSWORD\" | ./hvruserconfig -c $HUBADMIN_USERNAME Full_Name='autogenerated admin account'"

                    # Make admin user HubOwner (superuser)                  
                    su - hvr -c "cd /opt/hvr/hvr_home/bin; \
                    HVR_HOME=/opt/hvr/hvr_home \
                    HVR_CONFIG=/opt/hvr/hvr_config \
                    HVR_TMP=/opt/hvr/hvr_tmp \
                    ./hvrhubconfig -A user:$HUBADMIN_USERNAME=HubOwner hvrhub"

                    # Extract hub details                 
                    su - hvr -c "cd /opt/hvr/hvr_home/bin; \
                    HVR_HOME=/opt/hvr/hvr_home \
                    HVR_CONFIG=/opt/hvr/hvr_config \
                    HVR_TMP=/opt/hvr/hvr_tmp \
                    ./hvrreposconfig -o /tmp/tmp.json"

                    aws secretsmanager update-secret --secret-id ${HVRHubPublicCert} \
                       --secret-string `jq -r .Agent_Client_Public_Certificate < /tmp/tmp.json`

                    rm -rf /tmp/tmp.json

                fi

                # create .quickstart-configured file to indicate base hvr hub configuration is complete.
                touch $HVR_CONFIG/.quickstart-configured

            fi

            function cfn_fail
            {
              /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region} --resource HVRHUBAutoScalingGroup
              exit 1
            }

            function cfn_success
            {
              /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource HVRHUBAutoScalingGroup
              exit 0
            }

            # just run cfn-signal
            cfn_success || cfn_fail

  ## ------------------------------------------------------------ #
  ## Create the Launch Template for the HVR Agent EC2 Instances
  ## ------------------------------------------------------------ #
  HVRAgentLaunchTemplate:
    Condition: IsAcceptedEULA
    DependsOn: 
      - FileSystem
      - HVRHubPublicCert
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub hvr-agent-LT-${TagEnvironment}
      LaunchTemplateData:
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
              - HVRInstanceProfile
              - Arn
        ImageId:
          Fn::FindInMap:
            - RegionMap
            - Ref: AWS::Region
            - AMI
        SecurityGroupIds:
          - !Ref HVRSecurityGroupAgent
        InstanceType: !Ref HVRInstanceTypeAgent
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: True
            VolumeType: gp3
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: True
            VolumeType: gp3
        UserData: #  This code HVR as a systemd service.  unixODBC, mysql, postgres, snowflake, redshift, Then it signals completion:
          Fn::Base64: !Sub |
            #!/bin/bash -x
            
            # log to console and /var/log/user-data.log for debugging
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            yum update -y
            yum install -y amazon-cloudwatch-agent

            ## create basic sample config to log user data to cloudwatch logs
            cat << EOF > /opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-agent.json
            {
                  "logs": {
                        "logs_collected": {
                              "files": {
                                    "collect_list": [
                                          {
                                                "file_path": "/var/log/user-data.log",
                                                "log_group_name": "${LogGroupName}",
                                                "log_stream_name": "{instance_id}-agent-user-data"
                                          }
                                    ]
                              }
                        },
                        "log_stream_name": "{instance_id}"
                  }
            }
            EOF

            ## Now lets start the agent with above sample config
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-agent.json -s

            export HVR_HOME=/opt/hvr/hvr_home
            export HVR_CONFIG=/opt/hvr/hvr_config
            export HVR_TMP=/opt/hvr/hvr_tmp

            # this host is capable of running hubserver, but is used only for agent.
            systemctl stop hvrhubserver.service
            systemctl disable hvrhubserver.service

            REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)

            rm -rf /opt/hvr/hvr_config
            mkdir -p /opt/hvr/hvr_config/etc/cert
            HUB_PUB_CERT=`aws --region $REGION secretsmanager get-secret-value --secret-id ${HVRHubPublicCert} --query 'SecretString' --output text`
            if [ -z "$HUB_PUB_CERT" ]
            then
             # if the certificate is not set yet, sleep for 60 sec and try again
             sleep 60
             HUB_PUB_CERT=`aws --region $REGION secretsmanager get-secret-value --secret-id ${HVRHubPublicCert} --query 'SecretString' --output text`
            fi

            AGENT_PUB_CERT=`aws secretsmanager get-secret-value --secret-id ${HVRAgentPubKey} --query 'SecretString' --output text | base64 -d`
            AGENT_PRIV_KEY=`aws secretsmanager get-secret-value --secret-id ${HVRAgentPrivKey} --query 'SecretString' --output text | base64 -d`
            AGENT_PRIV_KEY_PASS=`aws secretsmanager get-secret-value --secret-id ${HVRAgentPrivKeyPassword} --query 'SecretString' --output text | base64 -d`

            cat << EOF > $HVR_CONFIG/etc/hvragent.conf
            {
              "Agent_Server_Public_Certificate": "$AGENT_PUB_CERT",
              "Agent_Server_Private_Key": "$AGENT_PRIV_KEY",
              "Agent_Server_Private_Key_Password": "$AGENT_PRIV_KEY_PASS",
              "Only_From_Client_Public_Certificates": {"hub": "$HUB_PUB_CERT"},
              "Anonymous_Access": {"allow": true}
            }
            EOF

            chown -R hvr:hvr /opt/hvr/hvr_config

            # Start Agent
            su - hvr -c "source .bash_profile; cd /opt/hvr/hvr_home/bin; ./hvragentlistener -d 4343"

            function cfn_fail
            {
              /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region} --resource HVRAgentAutoScalingGroup
              exit 1
            }

            function cfn_success
            {
              /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource HVRAgentAutoScalingGroup
              exit 0
            }

            # just run cfn-signal
            cfn_success || cfn_fail

  ## ------------------------------------------------------------ #
  ## Create the Network Load Balancer for the HVR Hub
  ## ------------------------------------------------------------ #
  HVRHUBNLB:
    Condition: IsAcceptedEULA
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value:
            !Ref NLBAccessLogsBucket
      Subnets:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      Type: network
      Tags:
        - Key: Name
          Value: !Sub hvr-hub-nlb-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create the Network Load Balancer for the HVR Agents
  ## ------------------------------------------------------------ #
  HVRAgentNLB:
    Condition: IsAcceptedEULA
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value:
            !Ref NLBAccessLogsBucket
      Subnets:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      Type: network
      Tags:
        - Key: Name
          Value: !Sub hvr-agent-nlb-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create the Load Balancer Target Group for the HVR Hub
  ## ------------------------------------------------------------ #
  HVRHUBNLBTargetGroup:
    Condition: IsAcceptedEULA
    DependsOn: HVRHUBNLB
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub hvr-hub-nlb-target-${TagEnvironment}
      TargetType: instance
      Port: 4341
      Protocol: TCP
      VpcId: !Ref VPCID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: !Sub hvr-hub-nlb-target-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create the Load Balancer Target Group for the HVR Agents
  ## ------------------------------------------------------------ #
  HVRAgentNLBTargetGroup:
    Condition: IsAcceptedEULA
    DependsOn: HVRAgentNLB
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub hvr-agent-nlb-target-${TagEnvironment}
      TargetType: instance
      Port: 4343
      Protocol: TCP
      VpcId: !Ref VPCID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: !Sub hvr-agent-nlb-target-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create the Network Load Balancer Listener for the HVR Hub
  ## ------------------------------------------------------------ #
  HVRHUBNLBListener:
    Condition: IsAcceptedEULA
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HVRHUBNLBTargetGroup
      LoadBalancerArn: !Ref HVRHUBNLB
      Port: 4341
      Protocol: TCP

  ## ------------------------------------------------------------ #
  ## Create the Network Load Balancer Listener for the HVR Agents
  ## ------------------------------------------------------------ #
  HVRAgentNLBListener:
    Condition: IsAcceptedEULA
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HVRAgentNLBTargetGroup
      LoadBalancerArn: !Ref HVRAgentNLB
      Port: 4343
      Protocol: TCP

  ## ------------------------------------------------------------ #
  ## Create Role that will be assigned to EC2 Instance Profile
  ## ------------------------------------------------------------ #
  HVRRole:
    Condition: IsAcceptedEULA
    Type: AWS::IAM::Role
    Properties:
      Description: HVR Role that will be used in EC2 instance profile for the HVR Hub and Agent.
      Tags:
        - Key: Name
          Value: !Sub hvr-role-${TagEnvironment}
        - Key: EnvironmentStage
          Value: !Sub ${TagEnvironment}
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              #####
              # Uncomment the required permissions depending on what service will be used, example RDS or S3
              # This will require the explicit set of the RESOURCE to only allow access to the resource and not using * for all of the account
              #####
              # - Action:
              #     - s3:ListAllMyBuckets
              #     - s3:ListBucket
              #     - s3:GetObject
              #     - s3:PutObject
              #     - s3:DeleteObject
              #     - s3:GetBucketLocation
              #   Effect: Allow
              #   Resource:
              #     - "*"
              #   Sid: StmtMinS3
              # - Action:
              #     - sqs:DeleteMessage
              #     - sqs:ListQueues
              #     - sqs:ReceiveMessage
              #     - sqs:SendMessage
              #     - sqs:GetQueueUrl
              #   Effect: Allow
              #   Resource:
              #     - "*"
              #   Sid: StmtMinSQS
              # - Action:
              #     - rds:DescribeDBInstances
              #   Effect: Allow
              #   Resource:
              #     - "*"
              #   Sid: StmtMinRDS
              # - Action:
              #     - ec2:CreateSnapshot
              #     - ec2:CreateTags
              #     - ec2:DescribeInstances
              #     - ec2:DescribeVolumes
              #   Effect: Allow
              #   Resource:
              #     - "*"
              #   Sid: StmtMinEC2
              # - Action:
              #     - sns:ListTopics
              #     - sns:CreateTopic
              #     - sns:Publish
              #   Effect: Allow
              #   Resource:
              #     - "*"
              #   Sid: StmtMinSNS
              # - Action:
              #     - cloudwatch:PutMetricData
              #     - cloudwatch:ListMetrics
              #   Effect: Allow
              #   Resource:
              #     - "*"
              #   Sid: StmtMinCloudwatch
              # - Action:
              #     - logs:CreateLogGroup
              #     - logs:CreateLogStream
              #     - logs:PutLogEvents
              #     - logs:DescribeLogStreams
              #   Effect: Allow
              #   Resource:
              #     - arn:aws:logs:*:*:*
              #   Sid: StmtMinCloudwatchLogs
              # - Action:
              #     - kms:ListAliases
              #     - kms:Encrypt
              #     - kms:Decrypt
              #   Effect: Allow
              #   Resource:
              #     - "*"
              #   Sid: StmtMinKMS
              # - Action:
              #     - ec2:DescribeRegions
              #     - iam:ListRoles
              #     - s3:GetBucketNotification
              #     - s3:ListAllMyBuckets
              #     - s3:PutBucketNotification
              #     - sqs:ChangeMessageVisibility
              #     - sqs:DeleteMessage
              #     - sqs:ListQueues
              #     - sqs:ReceiveMessage
              #   Effect: Allow
              #   Resource: "*"
              #   Sid: CDCPermissions
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Ref HVRPrivKey
                  - !Ref HVRPubKey
                  - !Ref HVRAdminUserPassword
                  - !Ref HVRHubPublicCert
                  - !Ref HVRAgentPubKey
                  - !Ref HVRAgentPrivKey
                  - !Ref HVRAgentPrivKeyPassword
                  - !If
                      - NoHVRLicenseProvided
                      -
                        !Ref HVRLicKey
                      - !Ref HVRLicenseSecret
                Sid: SSMGetPermissions
              - Effect: Allow
                Action:
                  - "secretsmanager:UpdateSecret"
                Resource:
                  - !Ref HVRHubPublicCert
                Sid: SSMUpdatePermissions
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                Resource:
                  - !GetAtt CloudwatchLogGroup.Arn
          PolicyName: !Sub hvr-role-policy-${TagEnvironment}

  ## ------------------------------------------------------------ #
  ## Create the EC2 Instance Profile and assign role to it
  ## ------------------------------------------------------------ #
  HVRInstanceProfile:
    Condition: IsAcceptedEULA
    DependsOn:
      - HVRLicKeyWaitCondition
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub hvr-instance-profile-${TagEnvironment}
      Path: /
      Roles:
        - !Ref HVRRole

  ## ------------------------------------------------------------ #
  # This is work-around to ensure we have correct dependancy for License Key secret to be
  # created prior to other resources, using below is DependsOn does not support !If condition
  ## ------------------------------------------------------------ #
  HVRLicKeyWaitHandle:
    Condition: NoHVRLicenseProvided
    DependsOn:
      - "HVRLicKey"
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  HVRLicKeyWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [NoHVRLicenseProvided, !Ref HVRLicKeyWaitHandle, !Ref WaitHandle]
      Timeout: "1"
      Count: 0
  ## ------------------------------------------------------------ #



######################################
## Define stack output values
######################################
Outputs:

  HVRAdminUserSecretARN:
    Condition: IsAcceptedEULA
    Description: AWS Secret ARN for HVR UI admin user password, located in Secrets Manager.
    Value: !Ref HVRAdminUserPassword

  HVRPort:
    Condition: IsAcceptedEULA
    Description: Default Port of the HVR Hub and Agent
    Value: 4341

  HVRHubNLBDns:
    Condition: IsAcceptedEULA
    Description: HVR Hub Access Point (Load Balancer DNS)
    Value: !GetAtt HVRHUBNLB.DNSName

  HVRAgentNLBDns:
    Condition: IsAcceptedEULA
    Description: HVR Agent Access Point (Load Balancer DNS)
    Value: !GetAtt HVRAgentNLB.DNSName

  HVRPublicKey:
    Condition: IsAcceptedEULA
    Description: HVR Hub Public Key
    Value: !Ref HVRPubKeyBase64

